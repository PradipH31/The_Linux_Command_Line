for
	2 forms
	
Traditional Shell Form
	for variable [in words]; do
		commands
	done
		where vairable is the vairable that increments during execution of loop
		words is an optional list of items that will be sequentially assigned to variable
	Usage:
		for i in A B C D; do echo $i; done
		A
		B
		C
		D
	for is given 4 words
	We can create the assignments in interesting ways
		through brace expansion
			for i in {A..D}; do echo #i; done
		pathname expansion
			for i in distros*.txt; do echo "$i"; done
			If pathname expansion fails, the wildcard will be returned
			To guard against this, we could code like:
				for i in distros*.txt; do
					if [[ -e "$i" ]]; then
						echo "$i"
					fi
				done
		command substitution
			while [[ -n "$1" ]]; do
				if [[ -r "$1" ]]; then
					max_word=
					max_len=0
					for i in $(strings "$1"); do
						len="$(echo -n "$i" | wc -c)"
						if (( len > max_len )); then
							max_len="$len"
							max_word="$i"
						fi
					done
					echo "$1: '$max_word' ($max_len_characters)"
				fi
				shift
			done

			We look for the longest string found within a file, with strings program
			strings generates a list of readable text words in each file

			Contrary to usual practice, we do not surround command substitution $(strings "$1") with double quotes
			This is because we want word splitting to occur to give us our list
			If we had surrounded, it would produce a single word containing every string in the file

			If the optional portion of for is omitted, for defaults to processing the positional parameters
			for i; do
				if [[ -r "$1" ]]; then
					max_word=
					max_len=0
					for j in $(strings "$1"); do
						len="$(echo -n "$j" | wc -c)"
						if (( len > max_len )); then
							max_len="$len"
							max_word="$j"
						fi
					done
					echo "$1: '$max_word' ($max_len_characters)"
				fi
			done


for: C Language Form
	Recent bash versions have added for syntax that resembles C syntax
	for (( expression1; expression2; expression3 )); do
		commands
	done
		exp1, exp2 and exp3 are arithmetic expressions, and commands are commands
		It is similar to behavior of
		(( expression1 ))
		while (( expression2 )); do
			commands
			(( expression3 ))
		done
			exp1 initializes conditions for the loop
			exp2 determines when the loop is finished
			exp3 is carried out at the end of each iteration
		Usage:
			for (( i=0; i<5; i=i+1)); do
				echo $i
			done


Applying improvements to sys_info_page script
________________________________________________________________________________
report_home_space() {

		local format="%8s%10s%10s\n"
		local i dir_list total_files total_dirs total_size user_name

		if [[ "$(id -u)" -eq 0 ]]; then
			dir_list=/home/*
			user_name="All Users"
		else
			dir_list="$HOME"
			user_name="$USER"
		fi

		echo "<h2>Home Space Utilization ($user_name)</h2>"

		for i in $dir_list; do
			
			total_files="$(find "$i" -type f | wc -l)"
			total_dirs="$(find "$i" -type d | wc -l)"
			total_size="$(du -sh "$i" | cut -f 1)"
			
			echo "<h3>$i</h3>"
			echo "<pre>"
			printf "$format" "Dirs" "Files" "Size"
			printf "$format" "----" "-----" "----"
			printf "$format" "$total_dirs" "$total_files" "$total_size"
			echo "</pre>"
		done
		return
}
________________________________________________________________________________

